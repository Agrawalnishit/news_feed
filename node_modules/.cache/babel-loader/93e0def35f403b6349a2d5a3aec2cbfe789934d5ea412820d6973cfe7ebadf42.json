{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom/client';import'./index.css';import App from'./App.jsx';import ErrorBoundary from'./components/ErrorBoundary';import*as serviceWorker from'./serviceWorker';// Initialize the root element\nimport{jsx as _jsx}from\"react/jsx-runtime\";const rootElement=document.getElementById('root');if(!rootElement){throw new Error('Failed to find the root element');}// Create the root\nconst root=ReactDOM.createRoot(rootElement);// Render the app\nroot.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(ErrorBoundary,{children:/*#__PURE__*/_jsx(App,{})})}));// Register service worker with configuration\nserviceWorker.register({onSuccess:registration=>{console.log('PWA is ready for offline use:',registration);},onUpdate:registration=>{const waitingServiceWorker=registration.waiting;if(waitingServiceWorker){waitingServiceWorker.addEventListener(\"statechange\",event=>{if(event.target.state===\"activated\"){window.location.reload();}});waitingServiceWorker.postMessage({type:\"SKIP_WAITING\"});}}});","map":{"version":3,"names":["React","ReactDOM","App","ErrorBoundary","serviceWorker","jsx","_jsx","rootElement","document","getElementById","Error","root","createRoot","render","StrictMode","children","register","onSuccess","registration","console","log","onUpdate","waitingServiceWorker","waiting","addEventListener","event","target","state","window","location","reload","postMessage","type"],"sources":["D:/Intern_assignment/news-feed-app/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Initialize the root element\r\nconst rootElement = document.getElementById('root');\r\nif (!rootElement) {\r\n  throw new Error('Failed to find the root element');\r\n}\r\n\r\n// Create the root\r\nconst root = ReactDOM.createRoot(rootElement);\r\n\r\n// Render the app\r\nroot.render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary>\r\n      <App />\r\n    </ErrorBoundary>\r\n  </React.StrictMode>\r\n);\r\n\r\n// Register service worker with configuration\r\nserviceWorker.register({\r\n  onSuccess: (registration) => {\r\n    console.log('PWA is ready for offline use:', registration);\r\n  },\r\n  onUpdate: (registration) => {\r\n    const waitingServiceWorker = registration.waiting;\r\n    if (waitingServiceWorker) {\r\n      waitingServiceWorker.addEventListener(\"statechange\", event => {\r\n        if (event.target.state === \"activated\") {\r\n          window.location.reload();\r\n        }\r\n      });\r\n      waitingServiceWorker.postMessage({ type: \"SKIP_WAITING\" });\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,aAAa,CACpB,MAAO,CAAAC,GAAG,KAAM,WAAW,CAC3B,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,MAAO,GAAK,CAAAC,aAAa,KAAM,iBAAiB,CAEhD;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,CAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CACnD,GAAI,CAACF,WAAW,CAAE,CAChB,KAAM,IAAI,CAAAG,KAAK,CAAC,iCAAiC,CAAC,CACpD,CAEA;AACA,KAAM,CAAAC,IAAI,CAAGV,QAAQ,CAACW,UAAU,CAACL,WAAW,CAAC,CAE7C;AACAI,IAAI,CAACE,MAAM,cACTP,IAAA,CAACN,KAAK,CAACc,UAAU,EAAAC,QAAA,cACfT,IAAA,CAACH,aAAa,EAAAY,QAAA,cACZT,IAAA,CAACJ,GAAG,GAAE,CAAC,CACM,CAAC,CACA,CACpB,CAAC,CAED;AACAE,aAAa,CAACY,QAAQ,CAAC,CACrBC,SAAS,CAAGC,YAAY,EAAK,CAC3BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAEF,YAAY,CAAC,CAC5D,CAAC,CACDG,QAAQ,CAAGH,YAAY,EAAK,CAC1B,KAAM,CAAAI,oBAAoB,CAAGJ,YAAY,CAACK,OAAO,CACjD,GAAID,oBAAoB,CAAE,CACxBA,oBAAoB,CAACE,gBAAgB,CAAC,aAAa,CAAEC,KAAK,EAAI,CAC5D,GAAIA,KAAK,CAACC,MAAM,CAACC,KAAK,GAAK,WAAW,CAAE,CACtCC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAC1B,CACF,CAAC,CAAC,CACFR,oBAAoB,CAACS,WAAW,CAAC,CAAEC,IAAI,CAAE,cAAe,CAAC,CAAC,CAC5D,CACF,CACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}