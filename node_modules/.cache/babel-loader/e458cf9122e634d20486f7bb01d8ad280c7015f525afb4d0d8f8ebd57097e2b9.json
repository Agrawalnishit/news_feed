{"ast":null,"code":"import{useState,useEffect}from'react';export function useLocalStorage(key,initialValue){// Get from local storage then\n// parse stored json or return initialValue\nconst readValue=()=>{try{const item=window.localStorage.getItem(key);return item?JSON.parse(item):initialValue;}catch(error){console.warn(\"Error reading localStorage key \\\"\".concat(key,\"\\\":\"),error);return initialValue;}};// State to store our value\n// Pass initial state function to useState so logic is only executed once\nconst[storedValue,setStoredValue]=useState(readValue);// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nconst setValue=value=>{try{// Allow value to be a function so we have same API as useState\nconst valueToStore=value instanceof Function?value(storedValue):value;// Save to state\nsetStoredValue(valueToStore);// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){console.warn(\"Error setting localStorage key \\\"\".concat(key,\"\\\":\"),error);}};useEffect(()=>{setStoredValue(readValue());// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return[storedValue,setValue];}","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","readValue","item","window","localStorage","getItem","JSON","parse","error","console","warn","concat","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["D:/Intern_assignment/news-feed-app/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n  // Get from local storage then\r\n  // parse stored json or return initialValue\r\n  const readValue = () => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  };\r\n\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(readValue);\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      \r\n      // Save to state\r\n      setStoredValue(valueToStore);\r\n      \r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setStoredValue(readValue());\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return [storedValue, setValue];\r\n}"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,MAAO,SAAS,CAAAC,eAAeA,CAACC,GAAG,CAAEC,YAAY,CAAE,CACjD;AACA;AACA,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,GAAI,CACF,KAAM,CAAAC,IAAI,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC,CAC7C,MAAO,CAAAG,IAAI,CAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAGF,YAAY,CAC/C,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACC,IAAI,qCAAAC,MAAA,CAAoCZ,GAAG,QAAMS,KAAK,CAAC,CAC/D,MAAO,CAAAR,YAAY,CACrB,CACF,CAAC,CAED;AACA;AACA,KAAM,CAACY,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAACK,SAAS,CAAC,CAEzD;AACA;AACA,KAAM,CAAAa,QAAQ,CAAGC,KAAK,EAAI,CACxB,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAGD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACH,WAAW,CAAC,CAAGG,KAAK,CAE3E;AACAF,cAAc,CAACG,YAAY,CAAC,CAE5B;AACAb,MAAM,CAACC,YAAY,CAACc,OAAO,CAACnB,GAAG,CAAEO,IAAI,CAACa,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CAAE,MAAOR,KAAK,CAAE,CACdC,OAAO,CAACC,IAAI,qCAAAC,MAAA,CAAoCZ,GAAG,QAAMS,KAAK,CAAC,CACjE,CACF,CAAC,CAEDX,SAAS,CAAC,IAAM,CACdgB,cAAc,CAACZ,SAAS,CAAC,CAAC,CAAC,CAC3B;AACF,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAACW,WAAW,CAAEE,QAAQ,CAAC,CAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}