{"ast":null,"code":"// Error types\nexport const ErrorTypes = {\n  API: 'API_ERROR',\n  NETWORK: 'NETWORK_ERROR',\n  AUTH: 'AUTH_ERROR',\n  VALIDATION: 'VALIDATION_ERROR',\n  UNKNOWN: 'UNKNOWN_ERROR'\n};\n\n// Error messages\nexport const ErrorMessages = {\n  [ErrorTypes.API]: 'An error occurred while fetching data. Please try again later.',\n  [ErrorTypes.NETWORK]: 'Please check your internet connection and try again.',\n  [ErrorTypes.AUTH]: 'Authentication failed. Please check your API key.',\n  [ErrorTypes.VALIDATION]: 'Invalid data received. Please try again.',\n  [ErrorTypes.UNKNOWN]: 'An unexpected error occurred. Please try again later.'\n};\n\n// Error handler function\nexport const handleError = error => {\n  console.error('Error occurred:', error);\n  if (error.message.includes('api key')) {\n    return {\n      type: ErrorTypes.AUTH,\n      message: ErrorMessages[ErrorTypes.AUTH]\n    };\n  }\n  if (error.message.includes('network') || error.message.includes('fetch')) {\n    return {\n      type: ErrorTypes.NETWORK,\n      message: ErrorMessages[ErrorTypes.NETWORK]\n    };\n  }\n  if (error.message.includes('invalid') || error.message.includes('required')) {\n    return {\n      type: ErrorTypes.VALIDATION,\n      message: ErrorMessages[ErrorTypes.VALIDATION]\n    };\n  }\n  return {\n    type: ErrorTypes.UNKNOWN,\n    message: ErrorMessages[ErrorTypes.UNKNOWN]\n  };\n};\n\n// Validation utility\nexport const validateArticle = article => {\n  const required = ['title', 'description', 'url'];\n  const missing = required.filter(field => !article[field]);\n  if (missing.length > 0) {\n    throw new Error(`Invalid article data. Missing required fields: ${missing.join(', ')}`);\n  }\n  return {\n    ...article,\n    title: article.title || 'Untitled',\n    description: article.description || 'No description available',\n    urlToImage: article.urlToImage || null,\n    publishedAt: article.publishedAt || new Date().toISOString(),\n    source: article.source || {\n      name: 'Unknown Source'\n    }\n  };\n};\n\n// API response validator\nexport const validateAPIResponse = data => {\n  if (!data) {\n    throw new Error('Empty response received');\n  }\n  if (data.status === 'error') {\n    throw new Error(data.message || 'API returned an error');\n  }\n  if (!Array.isArray(data.articles)) {\n    throw new Error('Invalid articles data received');\n  }\n  return {\n    articles: data.articles.map(validateArticle),\n    totalResults: data.totalResults || data.articles.length\n  };\n};\n\n// Rate limiting utility\nexport const rateLimiter = (() => {\n  const requests = new Map();\n  const maxRequests = 10;\n  const timeWindow = 5000; // 5 seconds\n\n  return {\n    checkLimit: key => {\n      const now = Date.now();\n      const windowStart = now - timeWindow;\n      const requestTimes = requests.get(key) || [];\n      const recentRequests = requestTimes.filter(time => time > windowStart);\n      if (recentRequests.length >= maxRequests) {\n        return false;\n      }\n      recentRequests.push(now);\n      requests.set(key, recentRequests);\n      return true;\n    }\n  };\n})();","map":{"version":3,"names":["ErrorTypes","API","NETWORK","AUTH","VALIDATION","UNKNOWN","ErrorMessages","handleError","error","console","message","includes","type","validateArticle","article","required","missing","filter","field","length","Error","join","title","description","urlToImage","publishedAt","Date","toISOString","source","name","validateAPIResponse","data","status","Array","isArray","articles","map","totalResults","rateLimiter","requests","Map","maxRequests","timeWindow","checkLimit","key","now","windowStart","requestTimes","get","recentRequests","time","push","set"],"sources":["D:/Intern_assignment/news-feed-app/src/utils/errorUtils.js"],"sourcesContent":["// Error types\r\nexport const ErrorTypes = {\r\n  API: 'API_ERROR',\r\n  NETWORK: 'NETWORK_ERROR',\r\n  AUTH: 'AUTH_ERROR',\r\n  VALIDATION: 'VALIDATION_ERROR',\r\n  UNKNOWN: 'UNKNOWN_ERROR'\r\n};\r\n\r\n// Error messages\r\nexport const ErrorMessages = {\r\n  [ErrorTypes.API]: 'An error occurred while fetching data. Please try again later.',\r\n  [ErrorTypes.NETWORK]: 'Please check your internet connection and try again.',\r\n  [ErrorTypes.AUTH]: 'Authentication failed. Please check your API key.',\r\n  [ErrorTypes.VALIDATION]: 'Invalid data received. Please try again.',\r\n  [ErrorTypes.UNKNOWN]: 'An unexpected error occurred. Please try again later.'\r\n};\r\n\r\n// Error handler function\r\nexport const handleError = (error) => {\r\n  console.error('Error occurred:', error);\r\n\r\n  if (error.message.includes('api key')) {\r\n    return {\r\n      type: ErrorTypes.AUTH,\r\n      message: ErrorMessages[ErrorTypes.AUTH]\r\n    };\r\n  }\r\n\r\n  if (error.message.includes('network') || error.message.includes('fetch')) {\r\n    return {\r\n      type: ErrorTypes.NETWORK,\r\n      message: ErrorMessages[ErrorTypes.NETWORK]\r\n    };\r\n  }\r\n\r\n  if (error.message.includes('invalid') || error.message.includes('required')) {\r\n    return {\r\n      type: ErrorTypes.VALIDATION,\r\n      message: ErrorMessages[ErrorTypes.VALIDATION]\r\n    };\r\n  }\r\n\r\n  return {\r\n    type: ErrorTypes.UNKNOWN,\r\n    message: ErrorMessages[ErrorTypes.UNKNOWN]\r\n  };\r\n};\r\n\r\n// Validation utility\r\nexport const validateArticle = (article) => {\r\n  const required = ['title', 'description', 'url'];\r\n  const missing = required.filter(field => !article[field]);\r\n  \r\n  if (missing.length > 0) {\r\n    throw new Error(`Invalid article data. Missing required fields: ${missing.join(', ')}`);\r\n  }\r\n  \r\n  return {\r\n    ...article,\r\n    title: article.title || 'Untitled',\r\n    description: article.description || 'No description available',\r\n    urlToImage: article.urlToImage || null,\r\n    publishedAt: article.publishedAt || new Date().toISOString(),\r\n    source: article.source || { name: 'Unknown Source' }\r\n  };\r\n};\r\n\r\n// API response validator\r\nexport const validateAPIResponse = (data) => {\r\n  if (!data) {\r\n    throw new Error('Empty response received');\r\n  }\r\n\r\n  if (data.status === 'error') {\r\n    throw new Error(data.message || 'API returned an error');\r\n  }\r\n\r\n  if (!Array.isArray(data.articles)) {\r\n    throw new Error('Invalid articles data received');\r\n  }\r\n\r\n  return {\r\n    articles: data.articles.map(validateArticle),\r\n    totalResults: data.totalResults || data.articles.length\r\n  };\r\n};\r\n\r\n// Rate limiting utility\r\nexport const rateLimiter = (() => {\r\n  const requests = new Map();\r\n  const maxRequests = 10;\r\n  const timeWindow = 5000; // 5 seconds\r\n\r\n  return {\r\n    checkLimit: (key) => {\r\n      const now = Date.now();\r\n      const windowStart = now - timeWindow;\r\n      const requestTimes = requests.get(key) || [];\r\n      const recentRequests = requestTimes.filter(time => time > windowStart);\r\n\r\n      if (recentRequests.length >= maxRequests) {\r\n        return false;\r\n      }\r\n\r\n      recentRequests.push(now);\r\n      requests.set(key, recentRequests);\r\n      return true;\r\n    }\r\n  };\r\n})();"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAG;EACxBC,GAAG,EAAE,WAAW;EAChBC,OAAO,EAAE,eAAe;EACxBC,IAAI,EAAE,YAAY;EAClBC,UAAU,EAAE,kBAAkB;EAC9BC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3B,CAACN,UAAU,CAACC,GAAG,GAAG,gEAAgE;EAClF,CAACD,UAAU,CAACE,OAAO,GAAG,sDAAsD;EAC5E,CAACF,UAAU,CAACG,IAAI,GAAG,mDAAmD;EACtE,CAACH,UAAU,CAACI,UAAU,GAAG,0CAA0C;EACnE,CAACJ,UAAU,CAACK,OAAO,GAAG;AACxB,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIC,KAAK,IAAK;EACpCC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;EAEvC,IAAIA,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;IACrC,OAAO;MACLC,IAAI,EAAEZ,UAAU,CAACG,IAAI;MACrBO,OAAO,EAAEJ,aAAa,CAACN,UAAU,CAACG,IAAI;IACxC,CAAC;EACH;EAEA,IAAIK,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,IAAIH,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;IACxE,OAAO;MACLC,IAAI,EAAEZ,UAAU,CAACE,OAAO;MACxBQ,OAAO,EAAEJ,aAAa,CAACN,UAAU,CAACE,OAAO;IAC3C,CAAC;EACH;EAEA,IAAIM,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,IAAIH,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;IAC3E,OAAO;MACLC,IAAI,EAAEZ,UAAU,CAACI,UAAU;MAC3BM,OAAO,EAAEJ,aAAa,CAACN,UAAU,CAACI,UAAU;IAC9C,CAAC;EACH;EAEA,OAAO;IACLQ,IAAI,EAAEZ,UAAU,CAACK,OAAO;IACxBK,OAAO,EAAEJ,aAAa,CAACN,UAAU,CAACK,OAAO;EAC3C,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMQ,eAAe,GAAIC,OAAO,IAAK;EAC1C,MAAMC,QAAQ,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC;EAChD,MAAMC,OAAO,GAAGD,QAAQ,CAACE,MAAM,CAACC,KAAK,IAAI,CAACJ,OAAO,CAACI,KAAK,CAAC,CAAC;EAEzD,IAAIF,OAAO,CAACG,MAAM,GAAG,CAAC,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,kDAAkDJ,OAAO,CAACK,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;EACzF;EAEA,OAAO;IACL,GAAGP,OAAO;IACVQ,KAAK,EAAER,OAAO,CAACQ,KAAK,IAAI,UAAU;IAClCC,WAAW,EAAET,OAAO,CAACS,WAAW,IAAI,0BAA0B;IAC9DC,UAAU,EAAEV,OAAO,CAACU,UAAU,IAAI,IAAI;IACtCC,WAAW,EAAEX,OAAO,CAACW,WAAW,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC5DC,MAAM,EAAEd,OAAO,CAACc,MAAM,IAAI;MAAEC,IAAI,EAAE;IAAiB;EACrD,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAIC,IAAI,IAAK;EAC3C,IAAI,CAACA,IAAI,EAAE;IACT,MAAM,IAAIX,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,IAAIW,IAAI,CAACC,MAAM,KAAK,OAAO,EAAE;IAC3B,MAAM,IAAIZ,KAAK,CAACW,IAAI,CAACrB,OAAO,IAAI,uBAAuB,CAAC;EAC1D;EAEA,IAAI,CAACuB,KAAK,CAACC,OAAO,CAACH,IAAI,CAACI,QAAQ,CAAC,EAAE;IACjC,MAAM,IAAIf,KAAK,CAAC,gCAAgC,CAAC;EACnD;EAEA,OAAO;IACLe,QAAQ,EAAEJ,IAAI,CAACI,QAAQ,CAACC,GAAG,CAACvB,eAAe,CAAC;IAC5CwB,YAAY,EAAEN,IAAI,CAACM,YAAY,IAAIN,IAAI,CAACI,QAAQ,CAAChB;EACnD,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMmB,WAAW,GAAG,CAAC,MAAM;EAChC,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC1B,MAAMC,WAAW,GAAG,EAAE;EACtB,MAAMC,UAAU,GAAG,IAAI,CAAC,CAAC;;EAEzB,OAAO;IACLC,UAAU,EAAGC,GAAG,IAAK;MACnB,MAAMC,GAAG,GAAGnB,IAAI,CAACmB,GAAG,CAAC,CAAC;MACtB,MAAMC,WAAW,GAAGD,GAAG,GAAGH,UAAU;MACpC,MAAMK,YAAY,GAAGR,QAAQ,CAACS,GAAG,CAACJ,GAAG,CAAC,IAAI,EAAE;MAC5C,MAAMK,cAAc,GAAGF,YAAY,CAAC9B,MAAM,CAACiC,IAAI,IAAIA,IAAI,GAAGJ,WAAW,CAAC;MAEtE,IAAIG,cAAc,CAAC9B,MAAM,IAAIsB,WAAW,EAAE;QACxC,OAAO,KAAK;MACd;MAEAQ,cAAc,CAACE,IAAI,CAACN,GAAG,CAAC;MACxBN,QAAQ,CAACa,GAAG,CAACR,GAAG,EAAEK,cAAc,CAAC;MACjC,OAAO,IAAI;IACb;EACF,CAAC;AACH,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}